# Django Packages
from django.db import models
from django.db import transaction
from django.contrib.auth import get_user_model
from django.db.models.functions import ExtractMonth
from django.shortcuts import get_object_or_404
from django.db.models import Avg

# Restframework Packages
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import generics
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework import status
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.exceptions import PermissionDenied

# Serializers
from userauths.serializer import  ProfileSerializer
from store.serializers import  CouponSummarySerializer, EarningSummarySerializer,SummarySerializer, CartOrderItemSerializer, ProductSerializer, CartOrderSerializer, GallerySerializer, ReviewSerializer,  SpecificationSerializer, CouponSerializer, ColorSerializer, SizeSerializer, VendorSerializer
from vendor.serializers import *

# Models
from userauths.models import Profile, User
from store.models import CartOrderItem,  Product,  CartOrder,  Review, Coupon
from vendor.models import Vendor

# Others Packages
from datetime import datetime, timedelta




class DashboardStatsAPIView(generics.ListAPIView):
    serializer_class = SummarySerializer
    permission_classes = [IsAuthenticated,]
    
    def get_queryset(self):
        """
        Get the queryset of summary data for the dashboard stats.
        """
        user = self.request.user
        self.check_user_permissions(user)

        product_count = self.get_product_count(user)
        order_count = self.get_order_count(user)
        revenue = self.calculate_revenue(user)
        review_count = self.get_review_count(user)
        average_rating = self.calculate_average_rating(user)
        average_order_value = self.calculate_average_order_value(user)
        total_sales = self.calculate_total_sales(user)
        user_image = self.get_user_image(user)

        summary_object = {
            'out_of_stock': product_count,
            'orders': order_count,
            'revenue': revenue,
            'review': review_count,
            'average_review': average_rating,
            'average_order_value': average_order_value,
            'total_sales': total_sales,
            "user_image": user_image
        }
        
        return summary_object

    def check_user_permissions(self, user):
        """
        Check if the user has permission to access the dashboard stats.
        """
        try:
            user_role = User.objects.values_list('role', flat=True).get(pk=user.pk)
        except User.DoesNotExist:
            raise PermissionDenied("User not found")

        if user.role != 'Vendor':
            raise PermissionDenied("You do not have permission to perform this action.")
        
    def get_user_image(self, user):
        """
        Get the image of the vendor.
        """
        try:
            vendor = Vendor.objects.get(user=user)
            return vendor.image.url if vendor.image else ""
        except Vendor.DoesNotExist:
            return ""

    def get_product_count(self, user):
        """
        Get the count of products associated with the vendor.
        """
        return Product.objects.filter(vendor=user.id, in_stock=False).count()

    def get_order_count(self, user):
        """
        Get the count of paid orders associated with the vendor.
        """
        return CartOrder.objects.filter(vendor=user.id, payment_status="paid").count()

    def calculate_revenue(self, user):
        """
        Calculate the total revenue generated by paid orders associated with the vendor.
        """
        total_revenue = CartOrderItem.objects.filter(vendor=user.id, order__payment_status="paid").aggregate(
            total_revenue=models.Sum(models.F('sub_total') + models.F('shipping_amount')))['total_revenue'] or 0
        return total_revenue

    def get_review_count(self, user):
        """
        Get the count of reviews associated with products of the vendor.
        """
        vendor_product_ids = Product.objects.filter(vendor=user.id).values_list('id', flat=True)
        return Review.objects.filter(product_id__in=vendor_product_ids).count()

    def calculate_average_rating(self, user):
        """
        Calculate the average rating of products associated with the vendor.
        """
        vendor_product_ids = Product.objects.filter(vendor=user.id).values_list('id', flat=True)
        average_rating = Review.objects.filter(product_id__in=vendor_product_ids).aggregate(average=Avg('rating'))['average']
        if vendor_product_ids and average_rating is None:
            average_rating = 0
        return average_rating

    def calculate_average_order_value(self, user):
        """
        Calculate the average order value of paid orders associated with the vendor.
        """
        average_order_value = CartOrder.objects.filter(vendor=user.id, payment_status="Fulfilled").aggregate(
            avg_order_value=Avg('total'))['avg_order_value'] or 0
        return average_order_value

    def calculate_total_sales(self, user):
        """
        Calculate the total sales (sum of all total amounts) of paid orders associated with the vendor.
        """
        total_sales = CartOrder.objects.filter(vendor=user.id, payment_status="paid").aggregate(
            total_sales=models.Sum('total'))['total_sales'] or 0
        return total_sales

    def list(self, request, *args, **kwargs):
        queryset = self.get_queryset()
        serializer = self.get_serializer(queryset)
        return Response(serializer.data)



class ProductsAPIView(generics.ListAPIView):
    serializer_class = ProductSerializer
    permission_classes = (AllowAny,)

    def get_queryset(self):
        vendor_id = self.kwargs['vendor_id']
        vendor = Vendor.objects.get(id=vendor_id)
        products = Product.objects.filter(vendor=vendor)
        return products


class OrdersAPIView(generics.ListAPIView):
    """
    API view to retrieve a list of paid orders for the authenticated vendor.
    """
    serializer_class = CartOrderSerializer
    permission_classes = (IsAuthenticated,)  # Ensure the user is authenticated

    def get_queryset(self):
        """
        Override the default get_queryset method to filter orders by the authenticated vendor.
        Retrieves the vendor associated with the authenticated user and returns their orders.
        
        Check if the user has permission to access the dashboard stats.
        """
        user = self.request.user
        try:
            user_role = User.objects.values_list('role', flat=True).get(pk=user.pk)
        except User.DoesNotExist:
            raise PermissionDenied("Permission Denied!")

        if user.role != 'Vendor':
            raise PermissionDenied("You do not have permission to perform this action.")
        
        orders = CartOrder.objects.filter(vendor=user.id,)
        return orders


class OrderDetailAPIView(generics.RetrieveAPIView):
    serializer_class = CartOrderSerializer
    permission_classes = (IsAuthenticated,)

    def get_object(self):
        """
        Override the default get_object method to retrieve a specific order for the authenticated vendor.
        """
        user = self.request.user
        try:
            user_role = User.objects.values_list('role', flat=True).get(pk=user.pk)
        except User.DoesNotExist:
            raise PermissionDenied("Permission Denied!")

        if user.role != 'Vendor':
            raise PermissionDenied("You do not have permission to perform this action.")
        
        order_oid = self.kwargs['order_oid']
        try:
            order = CartOrder.objects.get(vendor=user.id, oid=order_oid)
        except CartOrder.DoesNotExist:
            raise PermissionDenied("Order not found")

        return order


class RevenueAPIView(generics.ListAPIView):
    serializer_class = CartOrderItemSerializer
    permission_classes = (AllowAny,)

    def get_queryset(self):
        vendor_id = self.kwargs['vendor_id']
        vendor = Vendor.objects.get(id=vendor_id)
        revenue = CartOrderItem.objects.filter(vendor=vendor, order__payment_status="paid").aggregate(
            total_revenue=models.Sum(models.F('sub_total') + models.F('shipping_amount')))['total_revenue'] or 0
        return revenue


class YearlyOrderReportChartAPIView(generics.ListAPIView):
    serializer_class = CartOrderItemSerializer
    permission_classes = (AllowAny,)

    def get_queryset(self):
        vendor_id = self.kwargs['vendor_id']
        vendor = Vendor.objects.get(id=vendor_id)

        # Include the 'product' field in the queryset
        report = CartOrderItem.objects.filter(
            vendor=vendor,
            order__payment_status="paid"
        ).select_related('product').values(
            'order__date', 'product'
        ).annotate(models.Count('id'))

        return report


@api_view(('GET',))
def MonthlyOrderChartAPIFBV(request, vendor_id):
    vendor = Vendor.objects.get(id=vendor_id)
    orders = CartOrder.objects.filter(vendor=vendor)
    orders_by_month = orders.annotate(month=ExtractMonth("date")).values(
        "month").annotate(orders=models.Count("id")).order_by("month")
    return Response(orders_by_month)


@api_view(('GET',))
def MonthlyProductsChartAPIFBV(request, vendor_id):
    vendor = Vendor.objects.get(id=vendor_id)
    products = Product.objects.filter(vendor=vendor)
    products_by_month = products.annotate(month=ExtractMonth("date")).values(
        "month").annotate(orders=models.Count("id")).order_by("month")
    return Response(products_by_month)



class ProductCreateView(generics.CreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = [IsAuthenticated,]

    @transaction.atomic
    def perform_create(self, serializer):
        """
        Handle the creation of a Product instance, ensuring the request is made by a Vendor.
        The function checks the user's role and vendor profile, processes nested data, 
        and associates the product with the vendor.
        """
        user = self.request.user
        if user.role != 'Vendor':
            raise PermissionDenied('Only vendors can create products.')

        try:
            vendor = user.vendor_profile
            print(vendor)
        except Vendor.DoesNotExist:
            raise PermissionDenied('Vendor profile not found for the user.')

        serializer.is_valid(raise_exception=True)
        serializer.save(vendor=vendor)
        product_instance = serializer.instance

        specifications_data = []
        colors_data = []
        sizes_data = []
        gallery_data = []
        for key, value in self.request.data.items():
            if key.startswith('specifications') and '[title]' in key:
                index = key.split('[')[1].split(']')[0]
                title = value
                content_key = f'specifications[{index}][content]'
                content = self.request.data.get(content_key)
                specifications_data.append(
                    {'title': title, 'content': content})

            elif key.startswith('colors') and '[name]' in key:
                index = key.split('[')[1].split(']')[0]
                name = value
                color_code_key = f'colors[{index}][color_code]'
                color_code = self.request.data.get(color_code_key)
                image_key = f'colors[{index}][image]'
                image = self.request.data.get(image_key)
                colors_data.append(
                    {'name': name, 'color_code': color_code, 'image': image})

            elif key.startswith('sizes') and '[name]' in key:
                index = key.split('[')[1].split(']')[0]
                name = value
                price_key = f'sizes[{index}][price]'
                price = self.request.data.get(price_key)
                sizes_data.append({'name': name, 'price': price})

            elif key.startswith('gallery') and '[image]' in key:
                index = key.split('[')[1].split(']')[0]
                image = value
                gallery_data.append({'image': image})

        # Log or print the data for debugging
        print('specifications_data:', specifications_data)
        print('colors_data:', colors_data)
        print('sizes_data:', sizes_data)
        print('gallery_data:', gallery_data)

        self.save_nested_data(
            product_instance, SpecificationSerializer, specifications_data)
        self.save_nested_data(product_instance, ColorSerializer, colors_data)
        self.save_nested_data(product_instance, SizeSerializer, sizes_data)
        self.save_nested_data(
            product_instance, GallerySerializer, gallery_data)

    def save_nested_data(self, product_instance, serializer_class, data):
        serializer = serializer_class(data=data, many=True, context={
                                      'product_instance': product_instance})
        serializer.is_valid(raise_exception=True)
        serializer.save(product=product_instance)


class ProductUpdateAPIView(generics.RetrieveUpdateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = (AllowAny, )

    def get_object(self):
        vendor_id = self.kwargs['vendor_id']
        product_pid = self.kwargs['product_pid']

        vendor = Vendor.objects.get(id=vendor_id)
        product = Product.objects.get(vendor=vendor, pid=product_pid)
        return product

    @transaction.atomic
    def update(self, request, *args, **kwargs):
        product = self.get_object()

        # Deserialize product data
        serializer = self.get_serializer(product, data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_update(serializer)

        # Delete all existing nested data
        product.specification().delete()
        product.color().delete()
        product.size().delete()
        product.gallery().delete()

        specifications_data = []
        colors_data = []
        sizes_data = []
        gallery_data = []
        # Loop through the keys of self.request.data
        for key, value in self.request.data.items():
            # Example key: specifications[0][title]
            if key.startswith('specifications') and '[title]' in key:
                # Extract index from key
                index = key.split('[')[1].split(']')[0]
                title = value
                content_key = f'specifications[{index}][content]'
                content = self.request.data.get(content_key)
                specifications_data.append(
                    {'title': title, 'content': content})

            # Example key: colors[0][name]
            elif key.startswith('colors') and '[name]' in key:
                # Extract index from key
                index = key.split('[')[1].split(']')[0]
                name = value
                color_code_key = f'colors[{index}][color_code]'
                color_code = self.request.data.get(color_code_key)
                image_key = f'colors[{index}][image]'
                image = self.request.data.get(image_key)
                colors_data.append(
                    {'name': name, 'color_code': color_code, 'image': image})

            # Example key: sizes[0][name]
            elif key.startswith('sizes') and '[name]' in key:
                # Extract index from key
                index = key.split('[')[1].split(']')[0]
                name = value
                price_key = f'sizes[{index}][price]'
                price = self.request.data.get(price_key)
                sizes_data.append({'name': name, 'price': price})

            # Example key: gallery[0][image]
            elif key.startswith('gallery') and '[image]' in key:
                # Extract index from key
                index = key.split('[')[1].split(']')[0]
                image = value
                gallery_data.append({'image': image})

        # Log or print the data for debugging
        print('specifications_data:', specifications_data)
        print('colors_data:', colors_data)
        print('sizes_data:', sizes_data)
        print('gallery_data:', gallery_data)

        # Save nested serializers with the product instance
        self.save_nested_data(
            product, SpecificationSerializer, specifications_data)
        self.save_nested_data(product, ColorSerializer, colors_data)
        self.save_nested_data(product, SizeSerializer, sizes_data)
        self.save_nested_data(product, GallerySerializer, gallery_data)

        return Response({'message': 'Product Updated'}, status=status.HTTP_200_OK)

    def save_nested_data(self, product_instance, serializer_class, data):
        serializer = serializer_class(data=data, many=True, context={
                                      'product_instance': product_instance})
        serializer.is_valid(raise_exception=True)
        serializer.save(product=product_instance)


class ProductDeleteAPIView(generics.DestroyAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = (AllowAny, )

    def get_object(self):
        vendor_id = self.kwargs['vendor_id']
        product_pid = self.kwargs['product_pid']

        vendor = Vendor.objects.get(id=vendor_id)
        product = Product.objects.get(vendor=vendor, pid=product_pid)
        return product


class FilterProductsAPIView(generics.ListAPIView):
    serializer_class = ProductSerializer
    permission_classes = (AllowAny,)

    def get_queryset(self):
        vendor_id = self.kwargs['vendor_id']
        filter = self.request.GET.get('filter')

        print("filter =======", filter)

        vendor = Vendor.objects.get(id=vendor_id)
        if filter == "published":
            products = Product.objects.filter(
                vendor=vendor, status="published")
        elif filter == "draft":
            products = Product.objects.filter(vendor=vendor, status="draft")
        elif filter == "disabled":
            products = Product.objects.filter(vendor=vendor, status="disabled")
        elif filter == "in-review":
            products = Product.objects.filter(
                vendor=vendor, status="in-review")
        elif filter == "latest":
            products = Product.objects.filter(vendor=vendor).order_by('-id')
        elif filter == "oldest":
            products = Product.objects.filter(vendor=vendor).order_by('id')
        else:
            products = Product.objects.filter(vendor=vendor)
        return products


class Earning(generics.ListAPIView):
    serializer_class = EarningSummarySerializer

    def get_queryset(self):

        vendor_id = self.kwargs['vendor_id']
        vendor = Vendor.objects.get(id=vendor_id)

        one_month_ago = datetime.today() - timedelta(days=28)
        monthly_revenue = CartOrderItem.objects.filter(vendor=vendor, order__payment_status="paid", date__gte=one_month_ago).aggregate(
            total_revenue=models.Sum(models.F('sub_total') + models.F('shipping_amount')))['total_revenue'] or 0
        total_revenue = CartOrderItem.objects.filter(vendor=vendor, order__payment_status="paid").aggregate(
            total_revenue=models.Sum(models.F('sub_total') + models.F('shipping_amount')))['total_revenue'] or 0

        return [{
            'monthly_revenue': monthly_revenue,
            'total_revenue': total_revenue,
        }]

    def list(self, request, *args, **kwargs):
        queryset = self.get_queryset()
        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)


@api_view(('GET',))
def MonthlyEarningTracker(request, vendor_id):
    vendor = Vendor.objects.get(id=vendor_id)
    monthly_earning_tracker = (
        CartOrderItem.objects
        .filter(vendor=vendor, order__payment_status="paid")
        .annotate(
            month=ExtractMonth("date")
        )
        .values("month")
        .annotate(
            sales_count=models.Sum("qty"),
            total_earning=models.Sum(
                models.F('sub_total') + models.F('shipping_amount'))
        )
        .order_by("-month")
    )
    return Response(monthly_earning_tracker)


class ReviewsListAPIView(generics.ListAPIView):
    serializer_class = ReviewSerializer
    permission_classes = (AllowAny,)

    def get_queryset(self):
        vendor_id = self.kwargs['vendor_id']
        vendor = Vendor.objects.get(id=vendor_id)
        reviews = Review.objects.filter(product__vendor=vendor)
        return reviews


class ReviewsDetailAPIView(generics.RetrieveUpdateAPIView):
    serializer_class = ReviewSerializer
    permission_classes = (AllowAny,)

    def get_object(self):
        vendor_id = self.kwargs['vendor_id']
        review_id = self.kwargs['review_id']

        vendor = Vendor.objects.get(id=vendor_id)
        review = Review.objects.get(product__vendor=vendor, id=review_id)
        return review



class CouponListAPIView(generics.ListAPIView):
    serializer_class = CouponSerializer
    queryset = Coupon.objects.all()
    permission_classes = (AllowAny, )

    def get_queryset(self):
        vendor_id = self.kwargs['vendor_id']
        vendor = Vendor.objects.get(id=vendor_id)
        coupon = Coupon.objects.filter(vendor=vendor)
        return coupon


class CouponCreateAPIView(generics.CreateAPIView):
    serializer_class = CouponSerializer
    queryset = Coupon.objects.all()
    permission_classes = (AllowAny, )

    def create(self, request, *args, **kwargs):
        payload = request.data

        vendor_id = payload['vendor_id']
        code = payload['code']
        discount = payload['discount']
        active = payload['active']

        print("vendor_id ======", vendor_id)
        print("code ======", code)
        print("discount ======", discount)
        print("active ======", active)

        vendor = Vendor.objects.get(id=vendor_id)
        coupon = Coupon.objects.create(
            vendor=vendor,
            code=code,
            discount=discount,
            active=(active.lower() == "true")
        )

        return Response({"message": "Coupon Created Successfully."}, status=status.HTTP_201_CREATED)


class CouponDetailAPIView(generics.RetrieveUpdateDestroyAPIView):
    serializer_class = CouponSerializer
    permission_classes = (AllowAny, )

    def get_object(self):
        vendor_id = self.kwargs['vendor_id']
        coupon_id = self.kwargs['coupon_id']

        vendor = Vendor.objects.get(id=vendor_id)

        coupon = Coupon.objects.get(vendor=vendor, id=coupon_id)
        return coupon


class CouponStats(generics.ListAPIView):
    serializer_class = CouponSummarySerializer

    def get_queryset(self):

        vendor_id = self.kwargs['vendor_id']
        vendor = Vendor.objects.get(id=vendor_id)

        total_coupons = Coupon.objects.filter(vendor=vendor).count()
        active_coupons = Coupon.objects.filter(
            vendor=vendor, active=True).count()

        return [{
            'total_coupons': total_coupons,
            'active_coupons': active_coupons,
        }]

    def list(self, request, *args, **kwargs):
        queryset = self.get_queryset()
        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)



class VendorProfileUpdateView(generics.RetrieveUpdateAPIView):
    queryset = Profile.objects.all()
    serializer_class = ProfileSerializer
    permission_classes = (AllowAny, )
    parser_classes = (MultiPartParser, FormParser)


class ShopUpdateView(generics.RetrieveUpdateAPIView):
    queryset = Vendor.objects.all()
    serializer_class = VendorSerializer
    permission_classes = (AllowAny, )      
    parser_classes = (MultiPartParser, FormParser)


class ShopAPIView(generics.RetrieveUpdateAPIView):
    queryset = Product.objects.all()
    serializer_class = VendorSerializer
    permission_classes = (AllowAny, )

    def get_object(self):
        vendor_slug = self.kwargs['vendor_slug']

        vendor = Vendor.objects.get(slug=vendor_slug)
        return vendor
    

class ShopProductsAPIView(generics.ListAPIView):
    serializer_class = ProductSerializer
    permission_classes = (AllowAny,)

    def get_queryset(self):
        vendor_slug = self.kwargs['vendor_slug']
        vendor = Vendor.objects.get(slug=vendor_slug)
        products = Product.objects.filter(vendor=vendor)
        return products




from rest_framework import status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated  # Ensure the user is authenticated
from rest_framework import generics
from .serializers import VendorSerializer

class VendorRegister(generics.CreateAPIView):
    serializer_class = VendorSerializer
    queryset = Vendor.objects.all()
    permission_classes = [IsAuthenticated]  # Ensure the user is logged in

    def create(self, request, *args, **kwargs):
        # Ensure the user is attached
        user = request.user  # The logged-in user
        
        if not user:
            return Response({'error': 'User is not authenticated'}, status=status.HTTP_400_BAD_REQUEST)

        # Create a new dictionary that includes user ID
        payload = request.data.copy()  # Make a mutable copy of request.data
        payload['user'] = user.id  # Attach the authenticated user to the request data

        # Now, call the serializer to create the vendor
        serializer = self.get_serializer(data=payload)
        
        if serializer.is_valid():
            vendor = serializer.save()
            vendor_data = {
                'store_name': vendor.name,
                'email': vendor.email,
                'phone_number': vendor.mobile,
                'description': vendor.description,
            }
            return Response({"message": "Created vendor account", "vendor": vendor_data}, status=status.HTTP_201_CREATED)
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)







# class VendorRegister(generics.CreateAPIView):
#     serializer_class = VendorSerializer
#     queryset = Vendor.objects.all()
#     permission_classes = [IsAuthenticated]

#     def create(self, request, *args, **kwargs):
#         payload = request.data
        
#         # Ensure all necessary fields are in the payload
#         image = payload.get('image', None)
#         name = payload.get('name')
#         email = payload.get('email')
#         description = payload.get('description')
#         mobile = payload.get('mobile')
        
#         user = request.user

#         # Validation for required fields (image can be optional, depending on your needs)
#         if not name or not email or not mobile:
#             return Response({"error": "Name, email, and mobile are required fields."}, status=status.HTTP_400_BAD_REQUEST)

#         if not user:
#             return Response({'error': 'User is not authenticated'}, status=status.HTTP_400_BAD_REQUEST)

#         # Serialize and validate the data
#         vendor_data = {
#             'image': image,
#             'name': name,
#             'email': email,
#             'description': description,
#             'mobile': mobile,
#             'user': user.id,  # Attach the user ID to the vendor (OneToOne relationship)
#         }

#         # Create a new Vendor instance via the serializer
#         serializer = self.get_serializer(data=vendor_data)
        
#         if serializer.is_valid():
#             # Save the vendor object to the database
#             vendor = serializer.save(user=user)
            
#             # Prepare the response data (could be expanded if necessary)
#             vendor_data = {
#                 'store_name': vendor.name,
#                 'email': vendor.email,
#                 'phone_number': vendor.mobile,
#                 'description': vendor.description,
#             }

#             print(vendor)
#             return Response({"message": "Created vendor account", "vendor": vendor_data}, status=status.HTTP_201_CREATED)
        
#         # If validation fails, return the errors
#         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



    
class VendorStoreView(generics.ListAPIView):
    """
    API view to retrieve all products for a specific vendor along with vendor details.

    This view provides a list of products associated with a particular vendor identified by
    `vendor_id` in the URL. It also includes vendor-specific details such as store name,
    phone number, and address. 

    Permissions:
        - AllowAny: This view is accessible by any user without authentication.

    URL Parameters:
        - vendor_id (int): The ID of the vendor whose store information is to be retrieved.

    Response:
        - A JSON object containing:
            - store_name: The name of the vendor's store.
            - phone_number: The contact phone number of the vendor.
            - address: The address associated with the vendor.
            - products: A list of products available in the vendor's store, each serialized with
              their respective details.
    """
    serializer_class = AllProductSerializer
    permission_classes = [AllowAny]

    def get(self, request, *args, **kwargs):
        """
        Handles GET requests to retrieve vendor's store information and associated products.

        Args:
            request (Request): The HTTP request object.
            *args: Additional positional arguments.
            **kwargs: Additional keyword arguments including `vendor_id`.

        Returns:
            Response: A Response object containing vendor details and serialized product data.
        """
        vendor_id = self.kwargs['vendor_id']
        vendor = get_object_or_404(Vendor, id=vendor_id)
        products = Product.objects.filter(vendor=vendor).order_by('title')
        
        product_serializer = self.get_serializer(products, many=True)

        vendor_data = {
            'store_name': vendor.name,  
            'phone_number': vendor.user.phone,
            'address': vendor.user.profile.address,
            'products': product_serializer.data
        }
        
        return Response(vendor_data, status=status.HTTP_200_OK)


class AllVendorsProductsList(generics.ListAPIView):
    serializer_class = AllVendorSerializer
    permission_classes = [AllowAny]

    def get_queryset(self):
        return Vendor.objects.filter(verified=True).select_related('user', 'user__profile')

    def list(self, request, *args, **kwargs):
        queryset = self.get_queryset()
        serializer = self.get_serializer(queryset, many=True)
        total_verified_vendors = queryset.count()
        return Response({
            'total_verified_vendors': total_verified_vendors,
            'vendors': serializer.data
        })