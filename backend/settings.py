"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from environs import Env
import os
from decouple import config # Using decouple to read .env
import dj_database_url
import cloudinary
import cloudinary.uploader
import cloudinary.api
import sys
import logging.config # For logging

# Initialize Env for reading .env file
env = Env()
env.read_env() # Reads the .env file

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get SECRET_KEY from environment variable
SECRET_KEY = env("SECRET_KEY", default='django-insecure-b*tuoe%^o+=^35$0fufrm=oamh^(o0tabn39(7ni12(i-oup+4') # Fallback for local, but ensure it's set in .env for production


# SECURITY WARNING: don't run with debug turned on in production!
# Get DEBUG from environment variable
DEBUG = env.bool("DEBUG", default=True) # Default to True for local, set to False in .env for production


# Site URL
# SITE_URL = env("SITE_URL")

DJANGO_SECRET_ADMIN_URL=env("DJANGO_SECRET_ADMIN_URL", default="admin/")

# ALLOWED_HOSTS from environment variable, split by comma
# For production, specify your Render URL and any other hostnames.
# For local, '127.0.0.1' and 'localhost' are usually sufficient.
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["127.0.0.1", "localhost", "localhost:8000", "localhost:3001"])
CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=['http://localhost:3000', 'http://localhost:8000'])
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin-allow-popups'



# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'drf_yasg',
    'drf_spectacular',

    # =================================================================================
    # Cloudinary "cloudinary_storage" MUST BE BEFORE "django.contrib.staticfiles"
    # TO OVERRIDE THE COLLECTSTATIC COMMAND AND HANDLE CLOUDINARY UPLOADS CORRECTLY.
    'cloudinary_storage',
    # =================================================================================

    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    # Custom Apps
    'admin_backend',
    'userauths',
    'store',
    'vendor',
    'customer',
    'addon',
    'api',
    'ShopCart',
    'checkout',
    'notification',
    'createOrder',
    # 'transaction',
    'chat',
    'measurements',
    'Blog',
    'Homepage',
    'Paystack_Webhoook_Prod',
    'utilities',


    # Third Party Apps
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'import_export',
    'anymail',
    'storages',

    'phone_verify',
    'channels',
    'django_filters',


    'phonenumber_field',  # Added
    'django_redis',  # Added
    'django_celery_beat',


    
    # Cloudinary
    'cloudinary',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Add Cors Middle ware here
    # 'admin_backend.middleware.AppendSlashMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'   


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

ASGI_APPLICATION = 'backend.asgi.application'



# Channel layers FOR (ASGI CHAT MESSAGES) for Redis, using REDIS_URL from .env
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [env("REDIS_URL", default='redis://127.0.0.1:6379/0')],
        },
    },
}




# Configure Django's CACHES to use Redis
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': env("REDIS_URL", default="redis://127.0.0.1:6379/0"), # Get Redis URL from environment variable
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}



# Database
# For Render production, DATABASE_URL will be set by Render (e.g., PostgreSQL).
# Use dj_database_url to parse database URL from environment variable
# Defaults to SQLite for local development if DATABASE_URL is not set in .env
DATABASES = {
    'default': dj_database_url.config(
        default=env("DATABASE_URL", default='sqlite:///db.sqlite3'),
        conn_max_age=600,
        ssl_require=False # Set to True if your DB requires SSL (e.g., some PostgreSQL on Heroku/Render)
                          # Render's managed PostgreSQL typically handles SSL automatically.
    )
}


# Add SQLite timeout option only if using SQLite (and not explicitly using a different DB)
if 'sqlite' in DATABASES['default']['ENGINE'] and not env('DATABASE_URL', default='').startswith('postgres'):
    DATABASES['default']['OPTIONS'] = {'timeout': 20}





# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Consider 'Africa/Lagos' if that's your primary timezone for consistency with Celery
TIME_ZONE = "Africa/Lagos"   # Can be 'Africa/Lagos' or 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Static files
STATIC_URL = '/static/' # Default for local dev if not using Cloudinary
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Ensure this exists    ############### COMPREHENSIVE FOR PRODUCTION PURPOSES PLEASE 

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Ensure this exists



# Cloudinary Configuration
CLOUDINARY_STORAGE = {
    "CLOUD_NAME": env("CLOUDINARY_CLOUD_NAME", default="your_cloud_name"),
    "API_KEY" : env("CLOUDINARY_API_KEY", default="your_api_key"),
    "API_SECRET" : env("CLOUDINARY_API_SECRET", default="your_api_secret"),
}

# Storages for media and static files
STORAGES = {
    "default": {
        "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage",
    },
    "staticfiles": {
        # Use StaticHashedCloudinaryStorage in production, Django's default for local DEBUG
        "BACKEND": "cloudinary_storage.storage.StaticHashedCloudinaryStorage" if not DEBUG else "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Override STATIC_URL for production to point directly to Cloudinary
if not DEBUG:
    # Ensure this matches your Cloudinary setup for static raw files.
    # The 'static' folder is often the default root.
    STATIC_URL = f'https://res.cloudinary.com/{CLOUDINARY_STORAGE["CLOUD_NAME"]}/raw/upload/v1/static/'




# WORKAROUND for older django-cloudinary-storage version
STATICFILES_STORAGE = STORAGES['staticfiles']['BACKEND']


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField' # Keep this as BigAutoField for new projects

AUTH_USER_MODEL = 'userauths.User'


# Paystack API Keys
PAYSTACK_TEST_KEY = env("PAYSTACK_TEST_KEY", default="sk_test_f5995ad3b929498e963ca52a9a065dd5c3190e31")
PAYSTACK_SECRET_KEY = env("PAYSTACK_SECRET_KEY", default="sk_test_f5995ad3b929498e963ca52a9a065dd5c3190e31")




# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
        "rest_framework.permissions.AllowAny",
    ),

    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),

   'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle', # Added for rate limiting
        'rest_framework.throttling.AnonRateThrottle'
    ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '100/day',  # Unauthenticated users
    #     'user': '1000/day'   # Authenticated users
    # },

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10  # Number of items per page
}



SPECTACULAR_SETTINGS = {
    'TITLE': 'Fashionistar Backend Project API',
    'DESCRIPTION': 'Fashionistar project description',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SECURITY': [{'Bearer': []}],
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'http',
            'scheme': 'bearer',
            'bearerFormat': 'JWT',
        },
    },
}


CORS_ALLOW_ALL_ORIGINS = True



SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=50),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',

    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}



# swagger settings
SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": True,
    "relative_paths": False,
    "DISPLAY_OPERATION_ID": False,
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"},
    },
}




JAZZMIN_SETTINGS = {
     
    "user_avatar": "media/default-user.jpg",  # Handle missing images, # Access image url  # Ensure this field exists in your Profile model
    # "user_avatar": "request.user.profile.image.url if request.user.profile.image else None",  # Handle missing images, # Access image url  # Ensure this field exists in your Profile model
    "usermodel_field_mappings": {
        # Replace 'users.User' with your actual custom User model
        "userauths.User": "avatar", 
    },
    "site_title": "Fashionistar",
    "site_header": "Fashionistar",
    "site_brand": "Modern Marketplace ",
    "site_icon": "images/favicon.ico",
    "site_logo": "images/logos/logo.jpg",
    "welcome_sign": "Welcome To Fashionistar",
    "copyright": "All right reserved to Fashionistar",
    "user_avatar": "images/photos/logo.jpg",
    "topmenu_links": [
        {"name": "Dashboard", "url": "home",
            "permissions": ["auth.view_user"]},
        {"model": "auth.User"},
    ],
    "show_sidebar": True,
    "navigation_expanded": True,
    "order_with_respect_to": [
        "store",
        "store.product",
        "store.cartorder",
        "store.cartorderitem",
        "store.cart",
        "store.category",
        "store.brand",
        "store.productfaq",
        "store.review",
        "store.Coupon",
        "store.DeliveryCouriers",
        "userauths",
        "userauths.user",
        "userauths.profile",
    ],
    "icons": {
        "admin.LogEntry": "fas fa-file",

        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",

        "userauths.User": "fas fa-user",
        "userauths.Profile": "fas fa-address-card",

        "store.Product": "fas fa-th",
        "store.CartOrder": "fas fa-shopping-cart",
        "store.Cart": "fas fa-cart-plus",
        "store.CartOrderItem": "fas fa-shopping-basket",
        "store.Brand": "fas fa-check-circle",
        "store.productfaq": "fas fa-question",
        "store.Review": "fas fa-star fa-beat",
        "store.Category": "fas fa-tag",
        "store.Coupon": "fas fa-percentage",
        "store.DeliveryCouriers": "fas fa-truck",
        "store.Address": "fas fa-location-arrow",
        "store.Tag": "fas fa-tag",
        "store.Wishlist": "fas fa-heart",
        "store.Notification": "fas fa-bell",

    },
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-arrow-circle-right",
    "related_modal_active": False,

    "custom_js": None,
    "show_ui_builder": False,

    "changeform_format": "horizontal_tabs",
    "changeform_format_overrides": {
        "auth.user": "collapsible",
        "auth.group": "vertical_tabs",
    },
}


JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": True,
    "brand_small_text": False,
    "brand_colour": "navbar-indigo",
    "accent": "accent-olive",
    "navbar": "navbar-indigo navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": False,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": False,
    "sidebar": "sidebar-dark-indigo",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "cyborg",
    "dark_mode_theme": "cyborg",
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    }
}





# The default for `DEFAULT_AUTO_FIELD` was changed back to `BigAutoField` above.
# If you explicitly need `AutoField` for existing apps, keep this line.
# Otherwise, relying on `BigAutoField` is generally better for new models.
# DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


PHONENUMBER_DB_FORMAT = "INTERNATIONAL"

PHONENUMBER_DEFAULT_REGION = "NG"

PHONENUMBER_DEFAULT_FORMAT = "INTERNATIONAL"




# # Twilio settings
# TWILIO_ACCOUNT_SID = config('TWILIO_ACCOUNT_SID', default='AC54b7212aa8ec1fb2985e8aa21f601c7f')
# TWILIO_AUTH_TOKEN = config('TWILIO_AUTH_TOKEN', default='e7abf1b8f50c0ff20b7c12ee5f223be4')
# TWILIO_PHONE_NUMBER = config('TWILIO_PHONE_NUMBER', default='+2349137654300')


# Twilio settings (get from .env, with dummy defaults for local if not set)
PHONE_VERIFICATION = {
    'BACKEND': 'phone_verify.backends.twilio.TwilioBackend',
    'OPTIONS': {
        'SID': env('TWILIO_ACCOUNT_SID', default='fake'),
        'SECRET': env('TWILIO_AUTH_TOKEN', default='fake'),
        'FROM': env('TWILIO_PHONE_NUMBER', default='+14755292729'),
        'SANDBOX_TOKEN':'123456' if DEBUG else None, # Use sandbox token only in debug
    },
    'TOKEN_LENGTH': 6,
    'MESSAGE': 'Welcome to {app}! Please use security code {security_code} to proceed.',
    'APP_NAME': 'Phone Verify',
    'SECURITY_CODE_EXPIRATION_TIME': 3600,
    'VERIFY_SECURITY_CODE_ONLY_ONCE': False,
}






EMAIL_BACKEND = 'admin_backend.backends.DatabaseConfiguredEmailBackend' # Set DatabaseConfiguredEmailBackend to use the backend configured from database.




DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='fashionistar.home.beauty@gmail.com')
SERVER_EMAIL = config('DEFAULT_FROM_EMAIL', default='fashionistar.home.beauty@gmail.com')


# Gmail SMTP Configuration (Used if you choose Gmail in the admin)
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='fashionistar.home.beauty@gmail.com')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='zjpskvqwkhubavjg')
EMAIL_PORT = 465        # Or 587 for TSL
EMAIL_USE_TLS = False   # Or EMAIL_USE_TSL = True

EMAIL_USE_SSL = True    # Or EMAIL_USE_SSL = False




# Mailgun Configuration (Used if you choose Mailgun in the admin)
ANYMAIL = {
    "MAILGUN_API_KEY": env("MAILGUN_API_KEY", default=None),
    "MAILGUN_SENDER_DOMAIN": env("MAILGUN_DOMAIN", default=None),
}


# Zoho ZeptoMail Configuration (Used if you choose Zoho in the admin)
ZOHO_ZEPTOMAIL_API_KEY_TOKEN = env('ZOHO_ZEPTOMAIL_API_KEY_TOKEN', default='Send Mail Token')
ZOHO_ZEPTOMAIL_HOSTED_REGION = env('ZOHO_ZEPTOMAIL_HOSTED_REGION', default='zeptomail.zoho.com')









#                       =========================
# ----------------------CELERY CONFIGURATION BEGINNING ------------------------------
#                       =========================


# Use Redis Cloud (SSL connection) for broker and backend
# Always prefer `rediss://` for encrypted connection
# Ensure REDIS_URL, CELERY_BROKER_URL, CELERY_RESULT_BACKEND are set in Render environment variables

# Get Redis URL from environment variable
REDIS_URL = env("REDIS_URL", default="redis://127.0.0.1:6379/0")

# Celery settings
CELERY_BROKER_URL = env('CELERY_BROKER_URL', default=REDIS_URL)
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default=REDIS_URL)


# Core settings
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "Africa/Lagos"   # Can be 'Africa/Lagos' or 'UTC'

# Task routing & reliability
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_TASK_TRACK_STARTED = True
CELERY_ACKS_LATE = True  # ensures tasks aren’t lost if worker crashes
CELERYD_PREFETCH_MULTIPLIER = 1  # prevent task duplication
CELERY_TASK_REJECT_ON_WORKER_LOST = True

# Retry and connection handling (production safe)
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BROKER_CONNECTION_TIMEOUT = 30
CELERY_BROKER_TRANSPORT_OPTIONS = {
    "visibility_timeout": 3600,         # 1hr task visibility
    "socket_timeout": 30,               # network read timeout
    "socket_connect_timeout": 30,       # initial connection timeout
    "retry_on_timeout": True,
    "max_connections": 20,              # limit connections
    "ssl_cert_reqs": None, # Important for rediss schemes if not using full cert validation
}




# Beat Scheduler (if you use periodic tasks)
# If using `django_celery_beat`, schedule via Admin UI, not hardcoded here.
# For simple schedule:

CELERY_BEAT_SCHEDULE = {
    # Example: send heartbeat every 10 minutes
    # "system-heartbeat": {
    #     "task": "userauths.tasks.system_heartbeat",
    #     "schedule": 600.0,  # seconds
    # },
}




#                       =========================
# ----------------------CELERY CONFIGURATION ENDS HERE ------------------------------
#                       =========================






# Logging Configuration (already optimized for DEBUG / production)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO' if not DEBUG else 'DEBUG', # INFO in production, DEBUG in local
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'stream': sys.stdout
        },
        'file': {
            'level': 'INFO' if not DEBUG else 'DEBUG', # INFO in production, DEBUG in local
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'application.log'),
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
       'webhook_file': {
            'level': 'INFO' if not DEBUG else 'DEBUG', # INFO in production, DEBUG in local
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'webhook.log'),
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        'mail_admins': {
          'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'verbose',
            'filters': ['require_debug_false']
        }
    },
    'filters':{
        'require_debug_false':{
             '()': 'django.utils.log.RequireDebugFalse',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file', 'mail_admins'],
            'level': 'INFO',
            'propagate': True,
        },
         'webhook':{
           'handlers': ['console', 'webhook_file', 'mail_admins'],
           'level': 'INFO' if not DEBUG else 'DEBUG',
            'propagate': False,
        },
        'paystack':{
           'handlers': ['console', 'file', 'mail_admins'],
           'level': 'INFO' if not DEBUG else 'DEBUG',
           'propagate': False,
         },
       'application':{
           'handlers': ['console', 'file', 'mail_admins'],
           'level': 'INFO' if not DEBUG else 'DEBUG',
           'propagate': False,
       }
    },
}













